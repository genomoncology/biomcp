name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "0.4.0"

jobs:
  # Quick checks that run on every PR
  quick-checks:
    runs-on: ubuntu-latest
    name: Quick Checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run linting checks
        run: |
          uv run ruff check src tests
          uv run ruff format --check src tests

      - name: Run type checking
        run: |
          uv run mypy

      - name: Run tests (Ubuntu, Python 3.12 only)
        run: |
          uv run python -m pytest --cov --cov-config=pyproject.toml --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Full matrix tests - only run on main branch pushes
  full-test-matrix:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Skip redundant test that was already run in quick-checks
          - python-version: "3.12"
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run tests
        run: |
          uv run python -m pytest

  # Build checks - run on PRs but simplified
  build-and-docs:
    runs-on: ubuntu-latest
    name: Build & Docs Check
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Build package
        run: |
          uv build

      - name: Install dependencies for docs
        run: |
          uv sync --all-extras

      - name: Build documentation
        run: |
          uv run mkdocs build --strict

  # MCP integration test - quick check
  test-mcp:
    runs-on: ubuntu-latest
    name: Test MCP Integration
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Test MCP server startup
        run: |
          timeout 10s uv run biomcp run || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Run MCP integration tests
        run: |
          uv run python -m pytest tests/tdd/test_mcp_integration.py -v
